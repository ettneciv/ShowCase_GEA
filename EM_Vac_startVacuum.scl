NAMESPACE EM_Vac
TYPE Vac_StartVacuum_Feedbacks
{ Published := 'TRUE' }
VERSION : 0.1
   STRUCT
      waitingAhuMinAirflow { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Bool;   // Waiting for AHU to reach the minimum required airflow.
      buildingUpVacuum { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Bool;   // Vacuum is building up to operational pressure.
      vacuumOperationReady { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Bool;   // Vacuum system is fully ready and operational.
      startingVacuum { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Bool;   // Vacuum is being started
      minAirflowReached { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Bool;   // Minimum airflow confirmed.
      minTimeLineEmptyReached { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Bool;
   END_STRUCT;

END_TYPE

FUNCTION_BLOCK EM_Vac_startVacuum
{ S7_Optimized_Access := 'TRUE' ; Published := 'TRUE' }
VERSION : 0.1
   VAR_INPUT 
      enableStepTransition { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Bool := true;   // Enable Step Transition
      parameters { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Vac_StartVacuum_Params;   // Start vacuum parameters
      activate { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Bool;   // Activate/Stop sequence
      emptyLine { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Bool;
      cm_inPosition { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Bool;   // CM/EM in position
      AHU_minAirflowReached { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Bool;   // AHU minimum airflow reached
      vacuumAirflow_PV { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Real;   // Vacuum airflow process value
   END_VAR

   VAR_OUTPUT 
      cmd_isolationVlvOpen { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Bool;   // Command to open isolation valve
      cmd_vacuumVlvOpen { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Bool;   // Command to open vacuum valve
      setpoint_vacuumControlVlv { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : USInt;   // Vacuum control valve setpoint
   END_VAR

   VAR 
      status { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'; S7_SetPoint := 'False'} : _.LIB.Util_modeStatus;   // Mode status
      feedbacks { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'; S7_SetPoint := 'False'} : Vac_StartVacuum_Feedbacks;   // Feedbacks
      step { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'; S7_SetPoint := 'False'} : _.LIB.Util_Step;   // Step status
      _step { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'; S7_SetPoint := 'False'} : _.LIB.Step;   // Step instance
      _stepTracker { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Struct
         actual { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Vac_StartVacuum_Steps;   // Current step
         next { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Vac_StartVacuum_Steps;   // Next step
      END_STRUCT;
   END_VAR


BEGIN
	REGION Header
	    //********************************************************
	    // EM_Vac_startVacuum Logic
	    // Description: 
	    // - Manages the start sequence for the vacuum system, ensuring proper airflow and valve operation..
	    //********************************************************
	    
	    REGION Revision History
	        (*
	            Author      Date        Change
	            GEA-VAR     15MAY25     Initial version
	        *)
	    END_REGION
	    
	END_REGION
	
	//********************************************************
	// Region: Start Vacuum Mode
	// Description: Handles the startup sequence for the vacuum system, 
	// ensuring proper airflow, valve operation, and pump activation.
	//********************************************************
	
	REGION Step 
	    IF #activate THEN
	        CASE #step.actual OF
	                // Idle state, no sequence active 
	            Vac_StartVacuum_Steps#INITIAL:
	                #_stepTracker.next := Vac_StartVacuum_Steps#CHECK_AHU_MIN_AIRFLOW;
	                
	                // Verify AHU minimum airflow   
	            Vac_StartVacuum_Steps#CHECK_AHU_MIN_AIRFLOW:
	                IF #AHU_minAirflowReached THEN
	                    #_stepTracker.next := Vac_StartVacuum_Steps#START_VACUUM_PUMP;
	                END_IF;
	                
	                // Start vacuum pump
	            Vac_StartVacuum_Steps#START_VACUUM_PUMP:
	                #_stepTracker.next := Vac_StartVacuum_Steps#BUILD_UP_VACUUM;
	                
	                // Build vacuum pressure
	            Vac_StartVacuum_Steps#BUILD_UP_VACUUM:
	                IF _.LIB.IsTimerExceeded(actualTimer := #step.actualTimer, limit := #parameters.vacuumBuildUpTimer) THEN
	                    #_stepTracker.next := Vac_StartVacuum_Steps#OPEN_ISOLATION_VALVE;
	                END_IF;
	                
	                // Open isolation valve
	            Vac_StartVacuum_Steps#OPEN_ISOLATION_VALVE:
	                #_stepTracker.next := Vac_StartVacuum_Steps#CHECK_MIN_VACUUM_AIRFLOW;
	                
	                // Verify minimum vacuum airflow
	            Vac_StartVacuum_Steps#CHECK_MIN_VACUUM_AIRFLOW:
	                IF (#vacuumAirflow_PV >= #parameters.minVacuumAirFlow) THEN
	                    #_stepTracker.next := Vac_StartVacuum_Steps#VACUUM_OPERATION_READY;
	                END_IF;
	                
	                // Vacuum ready for operation
	            Vac_StartVacuum_Steps#VACUUM_OPERATION_READY:
	                IF (#vacuumAirflow_PV < #parameters.minVacuumAirFlow) THEN
	                    #_stepTracker.next := Vac_StartVacuum_Steps#CHECK_MIN_VACUUM_AIRFLOW;
	                ELSIF #emptyLine THEN
	                    #_stepTracker.next := Vac_StartVacuum_Steps#EMPTY_LINE;
	                    
	                END_IF;
	                
	                // Empty Line
	            Vac_StartVacuum_Steps#EMPTY_LINE:
	                IF (#vacuumAirflow_PV < #parameters.minVacuumAirFlow) THEN
	                    #_stepTracker.next := Vac_StartVacuum_Steps#CHECK_MIN_VACUUM_AIRFLOW;
	                END_IF;
	                
	                // Handle invalid step
	            ELSE
	                // Reset to idle on invalid step
	                #step.actual := #_stepTracker.next := Vac_StartVacuum_Steps#INITIAL;
	        END_CASE;
	        
	        // Advance step when module positioned/Idle or Done and transition is enable
	        IF #enableStepTransition AND #cm_inPosition THEN
	            #step.actual := #_stepTracker.next;
	        END_IF;
	        
	    END_IF;
	    
	    // Manage step transitions and reset
	    #_step(forceReset:=NOT #activate,
	           step := #step);
	    #_stepTracker.actual := #step.actual;
	    
	END_REGION
	
	REGION Actions
	    // NA
	    
	END_REGION
	
	REGION Control Modules: Commands     
	    //********************************************************
	    // Isolation Valve Control
	    //********************************************************
	    REGION Isolation Valve
	        // Command to open
	        #cmd_isolationVlvOpen :=
	            (#step.actual = Vac_StartVacuum_Steps#OPEN_ISOLATION_VALVE) OR
	            (#step.actual = Vac_StartVacuum_Steps#CHECK_MIN_VACUUM_AIRFLOW) OR
	            (#step.actual = Vac_StartVacuum_Steps#VACUUM_OPERATION_READY) OR
	            (#step.actual = Vac_StartVacuum_Steps#EMPTY_LINE);
	        
	    END_REGION
	    
	    //********************************************************
	    // Vacuum Valve Control
	    //********************************************************
	    REGION Vacuum Valve
	        // Command to open
	        #cmd_vacuumVlvOpen :=
	            (#step.actual = Vac_StartVacuum_Steps#START_VACUUM_PUMP) OR
	            (#step.actual = Vac_StartVacuum_Steps#BUILD_UP_VACUUM) OR
	            (#step.actual = Vac_StartVacuum_Steps#OPEN_ISOLATION_VALVE) OR
	            (#step.actual = Vac_StartVacuum_Steps#CHECK_MIN_VACUUM_AIRFLOW) OR
	            (#step.actual = Vac_StartVacuum_Steps#VACUUM_OPERATION_READY) OR
	            (#step.actual = Vac_StartVacuum_Steps#EMPTY_LINE);
	        
	    END_REGION
	    
	    //********************************************************
	    // Vacuum Control Valve
	    //********************************************************
	    REGION Vacuum Control Valve
	        // Set vacuum control setpoint depending on state
	        IF #cmd_vacuumVlvOpen THEN
	            #setpoint_vacuumControlVlv := #parameters.vacuumControlSP;
	        ELSE
	            #setpoint_vacuumControlVlv := #parameters.vacuumControlMinOpening;
	        END_IF;
	        
	    END_REGION
	    
	END_REGION
	
	
	REGION Feedbacks
	    // Update feedback statuses
	    #feedbacks.waitingAhuMinAirflow := (#step.actual = Vac_StartVacuum_Steps#CHECK_AHU_MIN_AIRFLOW);
	    
	    #feedbacks.buildingUpVacuum := (#step.actual = Vac_StartVacuum_Steps#BUILD_UP_VACUUM);
	    
	    #feedbacks.vacuumOperationReady := (#vacuumAirflow_PV >= #parameters.minVacuumAirFlow);
	    
	    #feedbacks.startingVacuum := (#step.actual >= Vac_StartVacuum_Steps#INITIAL) AND  (NOT #feedbacks.vacuumOperationReady);
	    
	    #feedbacks.minAirflowReached := #vacuumAirflow_PV >= #parameters.minVacuumAirFlow;
	    
	    #feedbacks.minTimeLineEmptyReached := (#step.actual = Vac_StartVacuum_Steps#EMPTY_LINE) AND _.LIB.IsTimerExceeded(actualTimer := #step.actualTimer, limit := #parameters.minTimeLineEmpty);
	    
	END_REGION
	
	REGION Status
	    // System idle when not activated
	    #status.idle := NOT #activate;
	                                    
	    // System done when vacuum is stopped
	    #status.done := NOT #status.idle AND #cm_inPosition AND (#step.actual = Vac_StartVacuum_Steps#VACUUM_OPERATION_READY);
	                                    
	    // System busy during stop sequence
	    #status.busy := NOT #status.idle AND NOT #status.done;
	                                    
	END_REGION
	
	                                        
END_FUNCTION_BLOCK
END_NAMESPACE
