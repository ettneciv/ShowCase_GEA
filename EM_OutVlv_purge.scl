NAMESPACE EM_OutVlv
TYPE OutVlv_Purge_Feedbacks
{ Published := 'TRUE' }
VERSION : 0.1
   STRUCT
      purging { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Bool;   // Purge is active
      waitingStartDelay { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Bool;   // Start delay is active
   END_STRUCT;

END_TYPE

FUNCTION_BLOCK EM_OutVlv_purge
{ S7_Optimized_Access := 'TRUE' ; Published := 'TRUE' }
VERSION : 0.1
   VAR_INPUT 
      enableStepTransition { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Bool := true;   // Enable step transition
      parameters { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : OutVlv_Purge_Params;   // Purge parameters
      activate { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Bool;   // Activate purge sequence
      cm_inPosition { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Bool;   // CM/EM in position
      mode_idleOrDone { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Bool;   // Mode idle or done
      outletVlv_isOpen { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Bool;   // Outlet valve is closed
   END_VAR

   VAR_OUTPUT 
      cmd_modeOpenOutlet { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Bool;   // Command open outlet mode
      cmd_modeCloseOutlet { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Bool;   // Command close outlet mode
   END_VAR

   VAR 
      status { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'; S7_SetPoint := 'False'} : _.LIB.Util_modeStatus;   // Mode status
      feedbacks { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'; S7_SetPoint := 'False'} : OutVlv_Purge_Feedbacks;   // Feedbacks
      step { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'; S7_SetPoint := 'False'} : _.LIB.Util_Step;   // Step status
      _step { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'; S7_SetPoint := 'False'} : _.LIB.Step;   // Step instance
      _stepTracker { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Struct
         actual { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : OutVlv_Purge_Steps;   // Current step
         next { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : OutVlv_Purge_Steps;   // Next step
      END_STRUCT;
      _actualPurgeCount { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : USInt;
   END_VAR


BEGIN
	REGION Header
	    //********************************************************
	    // EM_OutVlv_purge Logic
	    // Description: 
	    // - Manages the purge sequence for the outlet valve, cycling open and close to clear the hopper.
	    //********************************************************
	        
	    REGION Revision History
	        (*
	        Author      Date        Change
	        GEA-VAR     2025-05-15  Initial version
	        *)
	    END_REGION
	END_REGION
	    
	REGION Step 
	    IF #activate THEN
	        CASE #step.actual OF
	                // Idle state, no sequence active 
	            OutVlv_Purge_Steps#INITIAL:
	                #_stepTracker.next := OutVlv_Purge_Steps#START_DELAY;
	                
	                // Delay for purge start
	            OutVlv_Purge_Steps#START_DELAY:
	                IF _.LIB.IsTimerExceeded(actualTimer:=#step.actualTimer, limit:=#parameters.startDelay) THEN
	                    #_stepTracker.next := OutVlv_Purge_Steps#OPEN_OUTLET;
	                END_IF;
	                
	                // Open outlet valve
	            OutVlv_Purge_Steps#OPEN_OUTLET:
	                #_stepTracker.next := OutVlv_Purge_Steps#CLOSE_OUTLET;
	                
	                // Close the outlet valve
	            OutVlv_Purge_Steps#CLOSE_OUTLET:
	                #_stepTracker.next := OutVlv_Purge_Steps#CHECK_PURGE_COUNT;
	                
	                // Check purge cycle count
	            OutVlv_Purge_Steps#CHECK_PURGE_COUNT:
	                IF #_actualPurgeCount >= #parameters.count THEN
	                    #_stepTracker.next := OutVlv_Purge_Steps#DONE;
	                ELSE
	                    #_stepTracker.next := OutVlv_Purge_Steps#OPEN_OUTLET;
	                END_IF;
	                
	                // Purge sequence complete
	            OutVlv_Purge_Steps#DONE:
	                ;
	                
	                // Handle invalid step
	            ELSE
	                // Reset to idle on invalid step
	                #step.actual := #_stepTracker.next := OutVlv_Purge_Steps#INITIAL;
	        END_CASE;
	        
	        // Advance step when module positioned/Idle or Done and transition is enable
	        IF #enableStepTransition AND #cm_inPosition AND #mode_idleOrDone THEN
	            #step.actual := #_stepTracker.next;
	        END_IF;
	        
	    END_IF;
	    
	    // Manage step transitions and reset
	    #_step(forceReset := NOT #activate,
	           step := #step);
	    #_stepTracker.actual := #step.actual;
	    
	END_REGION
	
	REGION Actions
	    CASE #step.actual OF
	        OutVlv_Purge_Steps#RESET_STEP..OutVlv_Purge_Steps#INITIAL:
	            #_actualPurgeCount := 0;
	            
	        OutVlv_Purge_Steps#CHECK_PURGE_COUNT:
	            IF #step.firstCycle THEN
	                #_actualPurgeCount += 1;
	            END_IF;
	            
	        ELSE  
	            ;
	    END_CASE;
	    
	END_REGION
	
	REGION Control Modules: Commands     
	    //********************************************************
	    // Start Open Outlet Mode Control
	    //********************************************************
	    #cmd_modeOpenOutlet :=
	        (#step.actual = OutVlv_Purge_Steps#OPEN_OUTLET) OR
	        (((#step.actual = OutVlv_Purge_Steps#INITIAL) OR (#step.actual = OutVlv_Purge_Steps#START_DELAY)) AND #outletVlv_isOpen);
	        
	    
	    //********************************************************
	    // Start Close Outlet Mode Control
	    //********************************************************
	        #cmd_modeCloseOutlet := (#step.actual = OutVlv_Purge_Steps#CLOSE_OUTLET);
	    
	END_REGION
	
	REGION #feedbacks
	    // Update feedback statuses
	    #feedbacks.purging := (#step.actual >= OutVlv_Purge_Steps#INITIAL);
	    #feedbacks.waitingStartDelay := (#step.actual = OutVlv_Purge_Steps#START_DELAY);
	    
	END_REGION
	
	REGION Status
	    // System idle when not activated
	    #status.idle := NOT #activate;
	                                    
	    // System done when purge complete
	    #status.done := NOT #status.idle AND #cm_inPosition AND (#step.actual = OutVlv_Purge_Steps#DONE) AND (NOT #step.firstCycle);
	                                    
	    // System busy if purge is not complete
	    #status.busy := NOT #status.idle AND NOT #status.done;
	                                    
	END_REGION
	
	                                        
END_FUNCTION_BLOCK
END_NAMESPACE
