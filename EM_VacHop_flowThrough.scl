NAMESPACE EM_VacHop
TYPE VacHop_FlowThrough_Feedbacks
{ Published := 'TRUE' }
VERSION : 0.1
   STRUCT
      na { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Bool;
   END_STRUCT;

END_TYPE

FUNCTION_BLOCK EM_VacHop_flowThrough
{ S7_Optimized_Access := 'TRUE' ; Published := 'TRUE' }
VERSION : 0.1
   VAR_INPUT 
      enableStepTransition { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Bool := true;   // Enable Step Transition
      parameters { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : VacHop_FlowThrough_Params;
      activate { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Bool;
      cm_inPosition { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Bool;   // CM in position
      em_idleOrDone { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Bool;   // EM Idle or Done
      em_vacuum_startVacuum_idle { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Bool;   // EM Vacuum: Start Vacuum mode idle
      em_outVlv_outletClose { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Bool;   // EM_OutVlv: outlet valve is open
   END_VAR

   VAR_OUTPUT 
      cmd_em_vacuum { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : _.EM_Vac.Vac_Cmd;   // EM_Vacuum: Command
      cmd_em_outVlv { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : _.EM_OutVlv.OutVlv_Cmd;   // EM_OutVlv: Command
   END_VAR

   VAR 
      status { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'; S7_SetPoint := 'False'} : _.LIB.Util_modeStatus;   // Mode status
      feedbacks { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'; S7_SetPoint := 'False'} : VacHop_FlowThrough_Feedbacks;   // Feedbacks
      step { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'; S7_SetPoint := 'False'} : _.LIB.Util_Step;   // Step status
      _step { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'; S7_SetPoint := 'False'} : _.LIB.Step;   // Step instance
      _stepTracker { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Struct
         actual { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : VacHop_FlowThrough_Steps;   // Current step
         next { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : VacHop_FlowThrough_Steps;   // Next step
      END_STRUCT;
   END_VAR


BEGIN
	REGION Header
	    //********************************************************
	    // EM_VacHop_flowThrough Logic
	    // Description: 
	    // - Manages the flowthrough sequence for the vacuum hopper, starting vacuum and opening the outlet valve.
	    //********************************************************
	    
	    REGION Revision History
	        (*
	        Author      Date        Change
	        GEA-VAR     2025-05-15  Initial version
	        *)
	    END_REGION
	END_REGION
	
	REGION Step 
	    IF #activate THEN
	        CASE #step.actual OF
	                // Idle state, no sequence active  
	            VacHop_FlowThrough_Steps#INITIAL:
	                #_stepTracker.next := VacHop_FlowThrough_Steps#CREATE_VACUUM;
	                
	                // Start vacuum system  
	            VacHop_FlowThrough_Steps#CREATE_VACUUM:
	                #_stepTracker.next := VacHop_FlowThrough_Steps#OPEN_OUTLET;
	                
	                //  Open outlet valve
	            VacHop_FlowThrough_Steps#OPEN_OUTLET:
	                #_stepTracker.next := VacHop_FlowThrough_Steps#READY;
	                
	                //  Flowthrough ready
	            VacHop_FlowThrough_Steps#READY:
	                ;
	                
	                // Handle invalid step
	            ELSE
	                // Reset to idle on invalid step
	                #step.actual := #_stepTracker.next := VacHop_FlowThrough_Steps#INITIAL;
	        END_CASE;
	        
	        // Advance step when module positioned
	        IF #enableStepTransition AND #cm_inPosition AND #em_idleOrDone THEN
	            #step.actual := #_stepTracker.next;
	        END_IF;
	        
	    END_IF;
	    
	    // Manage step transitions and reset
	    #_step(forceReset := NOT #activate,
	           step := #step);
	    #_stepTracker.actual := #step.actual;
	END_REGION
	
	REGION Equipment Modules   
	    REGION Vacuum: Commands        
	        CASE #step.actual OF
	            VacHop_FlowThrough_Steps#RESET_STEP:
	                // Set vacuum to idle
	                #cmd_em_vacuum := _.EM_Vac.Vac_Cmd#IDLE;
	                
	            VacHop_FlowThrough_Steps#INITIAL:
	                // Start vacuum or wait for idle
	                IF #em_vacuum_startVacuum_idle THEN
	                    #cmd_em_vacuum := _.EM_Vac.Vac_Cmd#IDLE;
	                ELSE
	                    #cmd_em_vacuum := _.EM_Vac.Vac_Cmd#START_VACUUM;
	                END_IF;
	            ELSE
	                // Maintain vacuum active
	                #cmd_em_vacuum := _.EM_Vac.Vac_Cmd#START_VACUUM;
	        END_CASE;
	        
	    END_REGION
	    
	    REGION Outlet Valve: Command     
	        CASE #step.actual OF
	            VacHop_FlowThrough_Steps#RESET_STEP:
	                // Set outlet valve to idle
	                #cmd_em_outVlv := _.EM_outVlv.OutVlv_Cmd#IDLE;
	                
	            VacHop_FlowThrough_Steps#INITIAL..VacHop_FlowThrough_Steps#CREATE_VACUUM:
	                // Open outlet valve or wait for close
	                IF NOT #em_outVlv_outletClose THEN
	                    #cmd_em_outVlv := _.EM_outVlv.OutVlv_Cmd#OPEN_OUTLET;
	                    
	                END_IF;
	            ELSE
	                // Maintain outlet valve open
	                #cmd_em_outVlv := _.EM_outVlv.OutVlv_Cmd#OPEN_OUTLET;
	                
	        END_CASE;
	        
	    END_REGION
	    
	END_REGION
	
	REGION Control Modules: Commands 
	    //********************************************************
	    // NA
	    //********************************************************
	    
	END_REGION
	
	REGION Feedbacks
	    // na
	    
	END_REGION
	
	REGION Status
	    // System idle when not activated
	    #status.idle := NOT #activate;
	                                    
	    // System done when flowthrough complete
	    #status.done := NOT #status.idle AND #cm_inPosition AND #em_idleOrDone AND (#step.actual = VacHop_FlowThrough_Steps#READY);
	                                    
	    //System busy during flowthrough sequence
	    #status.busy := NOT #status.idle AND NOT #status.done;
	                                    
	END_REGION
	
	                                        
END_FUNCTION_BLOCK
END_NAMESPACE
