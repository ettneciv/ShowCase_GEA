NAMESPACE EM_Vac
TYPE Vac_StopVacuum_Feedbacks
{ Published := 'TRUE' }
VERSION : 0.1
   STRUCT
      waitingIsolationVlvCloseDelay { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Bool;   // Delay before closing the isolation valve.
      waitingVacuumVlvCloseDelay { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Bool;   // Delay before closing the vacuum valve.
      stoppingVacuum { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Bool;   // Vacuum is being stopped
      vacuumStopped { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Bool;   // Vacuum system is fully stopped.
   END_STRUCT;

END_TYPE

FUNCTION_BLOCK EM_Vac_stopVacuum
{ S7_Optimized_Access := 'TRUE' ; Published := 'TRUE' }
VERSION : 0.1
   VAR_INPUT 
      enableStepTransition { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Bool := true;   // Enable Step Transition
      parameters { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Vac_StopVacuum_Params;   // Stop vacuum parameters
      activate { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Bool;   // Activate/Stop sequence
      cm_inPosition { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Bool;   // CM/EM in position
      vacuumVlv_isOpen { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Bool;   // Vacuum valve open
      vacuumVlv_isClosed { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Bool;   // Vacuum valve closed
      isolationVlv_isOpen { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Bool;   // Isolation valve open
      isolationVlv_isClosed { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Bool;   // Isolation valve closed
   END_VAR

   VAR_OUTPUT 
      cmd_isolationVlvOpen { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Bool;   // Command to open isolation valve
      cmd_vacuumVlvOpen { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Bool;   // Command to open vacuum valve
      setpoint_vacuumControlVlv { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : USInt;   // Vacuum control valve setpoint
   END_VAR

   VAR 
      status { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'; S7_SetPoint := 'False'} : _.LIB.Util_modeStatus;   // Mode status
      feedbacks { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'; S7_SetPoint := 'False'} : Vac_StopVacuum_Feedbacks;   // Feedbacks
      step { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'; S7_SetPoint := 'False'} : _.LIB.Util_Step;   // Step status
      _step { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'; S7_SetPoint := 'False'} : _.LIB.Step;   // Step instance
      _stepTracker { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Struct
         actual { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Vac_StopVacuum_Steps;   // Current step
         next { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Vac_StopVacuum_Steps;   // Next step
      END_STRUCT;
   END_VAR

   VAR CONSTANT 
      DEFAULT_VACUUM_CONTROL_MAX_OPENING : USInt := 100;
      DEFAULT_VACUUM_CONTROL_MIN_OPENING : USInt;
   END_VAR


BEGIN
	REGION Header
	    //********************************************************
	    // EM_Vac_stopVacuum Logic
	    // Description: 
	    // - Manages the stop sequence for the vacuum system, controlling valves and pump.
	    //********************************************************
	    
	    REGION Revision History
	        (*
	            Author      Date        Change
	            GEA-VAR     15MAY25     Initial version
	        *)
	    END_REGION
	    
	END_REGION
	
	REGION Step 
	    IF #activate THEN
	        CASE #step.actual OF
	                // Idle state, sequence inactive   
	            Vac_StopVacuum_Steps#INITIAL:
	                #_stepTracker.next := Vac_StopVacuum_Steps#ISOLATION_VALVE_CLOSE_DELAY_ACTIVE;
	                
	                // Wait for isolation valve close delay
	            Vac_StopVacuum_Steps#ISOLATION_VALVE_CLOSE_DELAY_ACTIVE:
	                IF _.LIB.IsTimerExceeded(actualTimer:=#step.actualTimer, limit:=#parameters.isolationVlvCloseDelay) OR #isolationVlv_isClosed THEN
	                    #_stepTracker.next := Vac_StopVacuum_Steps#CLOSE_ISOLATION_VALVE;
	                END_IF;
	                
	                //  Command isolation valve to close
	            Vac_StopVacuum_Steps#CLOSE_ISOLATION_VALVE:
	                #_stepTracker.next := Vac_StopVacuum_Steps#STOP_VACUUM_PUMP_DELAY_ACTIVE;
	                
	                // Wait for vacuum pump valve close delay
	            Vac_StopVacuum_Steps#STOP_VACUUM_PUMP_DELAY_ACTIVE:
	                IF _.LIB.IsTimerExceeded(actualTimer:=#step.actualTimer, limit:=#parameters.vacuumVlvCloseDelay) OR #vacuumVlv_isClosed THEN
	                    #_stepTracker.next := Vac_StopVacuum_Steps#STOP_VACUUM_PUMP;
	                END_IF;
	                
	                // Command vacuum pump valve to close
	            Vac_StopVacuum_Steps#STOP_VACUUM_PUMP:
	                #_stepTracker.next := Vac_StopVacuum_Steps#VACUUM_STOPPED;
	                
	                // Vacuum pump stopped, sequence complete
	            Vac_StopVacuum_Steps#VACUUM_STOPPED:
	                ;
	                
	                // Handle invalid step
	            ELSE
	                // Reset to idle on invalid step
	                #step.actual := #_stepTracker.next := Vac_StopVacuum_Steps#INITIAL;
	        END_CASE;
	        
	        // Advance step when module positioned/Idle or Done and transition is enable
	        IF #enableStepTransition AND #cm_inPosition THEN
	            #step.actual := #_stepTracker.next;
	        END_IF;
	        
	    END_IF;
	    
	    // Manage step transitions and reset
	    #_step(forceReset:=NOT #activate,
	           step := #step);
	    #_stepTracker.actual := #step.actual;
	    
	END_REGION
	
	REGION Actions
	    // NA
	    
	END_REGION
	
	REGION Control Modules: Commands     
	    //********************************************************
	    // Isolation Valve Control
	    //********************************************************
	    REGION Isolation Valve
	        // Set open command for valve
	        #cmd_isolationVlvOpen :=
	            #isolationVlv_isOpen AND 
	            ((#step.actual = Vac_StopVacuum_Steps#INITIAL) OR
	            (#step.actual = Vac_StopVacuum_Steps#ISOLATION_VALVE_CLOSE_DELAY_ACTIVE));
	        
	    END_REGION
	    
	    //********************************************************
	    // Vacuum Valve Control
	    //********************************************************
	    REGION Vacuum Valve
	        // Command to open
	        #cmd_vacuumVlvOpen :=
	            #vacuumVlv_isOpen AND
	            ((#step.actual = Vac_StopVacuum_Steps#INITIAL) OR
	            (#step.actual = Vac_StopVacuum_Steps#ISOLATION_VALVE_CLOSE_DELAY_ACTIVE) OR
	            (#step.actual = Vac_StopVacuum_Steps#CLOSE_ISOLATION_VALVE) OR
	            (#step.actual = Vac_StopVacuum_Steps#STOP_VACUUM_PUMP_DELAY_ACTIVE));
	        
	    END_REGION
	    
	    //********************************************************
	    // Vacuum Control Valve
	    //********************************************************
	    REGION Vacuum Control Valve
	        // Set vacuum control valve setpoint
	        IF #cmd_vacuumVlvOpen THEN
	            #setpoint_vacuumControlVlv := #parameters.vacuumControlSP;
	        ELSE
	            #setpoint_vacuumControlVlv := #DEFAULT_VACUUM_CONTROL_MIN_OPENING;
	        END_IF;
	        
	        #setpoint_vacuumControlVlv := LIMIT_USINT(MN := #parameters.vacuumControlMinOpening, IN := #setpoint_vacuumControlVlv, MX := #DEFAULT_VACUUM_CONTROL_MAX_OPENING);
	        
	    END_REGION
	    
	END_REGION
	
	REGION #feedbacks
	    // Update feedback statuses
	    #feedbacks.waitingIsolationVlvCloseDelay := (#step.actual = Vac_StopVacuum_Steps#ISOLATION_VALVE_CLOSE_DELAY_ACTIVE);
	    
	    #feedbacks.waitingVacuumVlvCloseDelay := (#step.actual = Vac_StopVacuum_Steps#STOP_VACUUM_PUMP_DELAY_ACTIVE);
	        
	    #feedbacks.vacuumStopped := (#step.actual = Vac_StopVacuum_Steps#VACUUM_STOPPED);
	    
	    #feedbacks.stoppingVacuum := (#step.actual >= _.EM_Vac.Vac_StopVacuum_Steps#INITIAL) AND (NOT #feedbacks.vacuumStopped);
	    
	END_REGION
	
	REGION Status
	    // System idle when not activated
	    #status.idle := NOT #activate;
	                                    
	    // System done when vacuum is stopped
	    #status.done := NOT #status.idle AND #cm_inPosition AND (#step.actual = Vac_StopVacuum_Steps#VACUUM_STOPPED);
	                                    
	    // System busy during stop sequence
	    #status.busy := NOT #status.idle AND NOT #status.done;
	                                    
	END_REGION
	
	                                        
END_FUNCTION_BLOCK
END_NAMESPACE
