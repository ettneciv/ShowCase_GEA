NAMESPACE EM_OutVlv
TYPE OutVlv_CloseOutlet_Feedbacks
{ Published := 'TRUE' }
VERSION : 0.1
   STRUCT
      waitingOutletCloseDelay { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Bool;   // Delay before closing the outlet valve
      outletClosed { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Bool;   // Outlet valve is closed
   END_STRUCT;

END_TYPE

FUNCTION_BLOCK EM_OutVlv_closeOutlet
{ S7_Optimized_Access := 'TRUE' ; Published := 'TRUE' }
VERSION : 0.1
   VAR_INPUT 
      enableStepTransition { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Bool := true;   // Enable Step Transition
      parameters { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : OutVlv_CloseOutlet_Params;   // Close outlet parameters
      activate { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Bool;   // Activate mode
      cm_inPosition { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Bool;   // CM in position
      outletVlv_isOpen { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Bool;   // Outlet valve is open
      outletVlv_isClosed { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Bool;   // Outlet valve is closed
   END_VAR

   VAR_OUTPUT 
      cmd_outletVlvOpen { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Bool;   // Command: outlet valve Open
   END_VAR

   VAR 
      status { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'; S7_SetPoint := 'False'} : _.LIB.Util_modeStatus;   // Mode status
      feedbacks { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'; S7_SetPoint := 'False'} : OutVlv_CloseOutlet_Feedbacks;   // Feedbacks
      step { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'; S7_SetPoint := 'False'} : _.LIB.Util_Step;   // Step status
      _step { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'; S7_SetPoint := 'False'} : _.LIB.Step;   // Step instance
      _stepTracker { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Struct
         actual { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : OutVlv_CloseOutlet_Steps;
         next { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : OutVlv_CloseOutlet_Steps;
      END_STRUCT;
   END_VAR


BEGIN
	REGION Header
	    //********************************************************
	    // EM_OutVlv_closeOutlet Logic
	    // Description: 
	    // - Manages the hopper outlet closing sequence, ensuring proper valve closure timing.
	    //********************************************************
	    
	    REGION Revision History
	        (*
	        Author      Date        Change
	        GEA-VAR     2025-05-15  Initial version
	        *)
	    END_REGION
	    
	END_REGION
	
	REGION Step 
	    IF #activate THEN
	        CASE #step.actual OF
	                // Idle state, no sequence active
	            OutVlv_CloseOutlet_Steps#INITIAL:
	                #_stepTracker.next := OutVlv_CloseOutlet_Steps#CLOSE_VLV_DELAY_ACTIVE;
	                
	                // Delay for outlet valve closure  
	            OutVlv_CloseOutlet_Steps#CLOSE_VLV_DELAY_ACTIVE:
	                IF (_.LIB.IsTimerExceeded(actualTimer := #step.actualTimer, limit := #parameters.vlvCloseDelay)) OR  #outletVlv_isClosed THEN
	                    #_stepTracker.next := OutVlv_CloseOutlet_Steps#CLOSE_VLV;
	                END_IF;
	                
	                // Close outlet valve
	            OutVlv_CloseOutlet_Steps#CLOSE_VLV:
	                #_stepTracker.next := OutVlv_CloseOutlet_Steps#OUTLET_CLOSED;
	                
	                // Outlet valve closed, sequence complete
	            OutVlv_CloseOutlet_Steps#OUTLET_CLOSED:
	                ;
	                
	            ELSE
	                // Reset to idle on invalid step
	                #step.actual := #_stepTracker.next := OutVlv_CloseOutlet_Steps#INITIAL;
	        END_CASE;
	        
	        // Advance step when module positioned/Idle or Done and transition is enable
	        IF #enableStepTransition AND #cm_inPosition THEN
	            #step.actual := #_stepTracker.next;
	        END_IF;
	        
	    END_IF;
	    
	    // Manage step transitions and reset
	    #_step(forceReset:=NOT #activate,
	           step := #step);
	    #_stepTracker.actual := #step.actual;
	    
	END_REGION
	
	REGION Actions
	    // NA
	    
	END_REGION
	
	REGION Control Modules: Commands     
	    //********************************************************
	    // Outlet Valve Control
	    //********************************************************
	    REGION Outlet Valve
	        // Command to open
	        #cmd_outletVlvOpen := #outletVlv_isOpen AND
	        ((#step.actual = OutVlv_CloseOutlet_Steps#INITIAL) OR
	        (#step.actual = OutVlv_CloseOutlet_Steps#CLOSE_VLV_DELAY_ACTIVE));
	        
	    END_REGION
	    
	END_REGION
	
	
	REGION Feedbacks
	    // Update feedback statuses
	    #feedbacks.waitingOutletCloseDelay := (#step.actual = OutVlv_CloseOutlet_Steps#CLOSE_VLV_DELAY_ACTIVE);
	    #feedbacks.outletClosed := #outletVlv_isClosed;
	END_REGION
	
	REGION Status
	    // System idle when not activated
	    #status.idle := (NOT #activate);
	                                    
	    // System done when outlet valve is closed
	    #status.done := (NOT #status.idle) AND #cm_inPosition AND (#step.actual = OutVlv_CloseOutlet_Steps#OUTLET_CLOSED);
	                                    
	    // System busy during closeOutlet Sequence
	    #status.busy := NOT (#status.idle OR #status.done);
	                                    
	END_REGION
	
	                                        
END_FUNCTION_BLOCK
END_NAMESPACE
